/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", {value: true});

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require("./runtime/edge.js");

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e",
};

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError;
Prisma.PrismaClientInitializationError = PrismaClientInitializationError;
Prisma.PrismaClientValidationError = PrismaClientValidationError;
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag;
Prisma.empty = empty;
Prisma.join = join;
Prisma.raw = raw;
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = Extensions.getExtensionContext;
Prisma.defineExtension = Extensions.defineExtension;

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: "ReadUncommitted",
  ReadCommitted: "ReadCommitted",
  RepeatableRead: "RepeatableRead",
  Serializable: "Serializable",
});

exports.Prisma.UserScalarFieldEnum = {
  id: "id",
  name: "name",
  email: "email",
  image: "image",
  role: "role",
  password: "password",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.ProblemScalarFieldEnum = {
  id: "id",
  title: "title",
  description: "description",
  difficulty: "difficulty",
  tags: "tags",
  userId: "userId",
  examples: "examples",
  constraints: "constraints",
  hints: "hints",
  editorial: "editorial",
  testcases: "testcases",
  codeSnippets: "codeSnippets",
  referenceSolutions: "referenceSolutions",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: "id",
  userId: "userId",
  problemId: "problemId",
  difficulty: "difficulty",
  sourceCode: "sourceCode",
  language: "language",
  stdin: "stdin",
  stdout: "stdout",
  stderr: "stderr",
  compileOutput: "compileOutput",
  status: "status",
  memory: "memory",
  time: "time",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.TestCaseResultScalarFieldEnum = {
  id: "id",
  submissionId: "submissionId",
  testCase: "testCase",
  passed: "passed",
  stdout: "stdout",
  expected: "expected",
  stderr: "stderr",
  compileOutput: "compileOutput",
  status: "status",
  memory: "memory",
  time: "time",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.ProblemSolvedScalarFieldEnum = {
  id: "id",
  userId: "userId",
  problemId: "problemId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.PlaylistScalarFieldEnum = {
  id: "id",
  name: "name",
  description: "description",
  userId: "userId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.ProblemInPlaylistScalarFieldEnum = {
  id: "id",
  playListId: "playListId",
  problemId: "problemId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.DiscussionCommentScalarFieldEnum = {
  id: "id",
  title: "title",
  content: "content",
  userId: "userId",
  problemId: "problemId",
  createdAt: "createdAt",
};

exports.Prisma.SortOrder = {
  asc: "asc",
  desc: "desc",
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull,
};

exports.Prisma.QueryMode = {
  default: "default",
  insensitive: "insensitive",
};

exports.Prisma.NullsOrder = {
  first: "first",
  last: "last",
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull,
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: "ADMIN",
  USER: "USER",
};

exports.Difficulty = exports.$Enums.Difficulty = {
  EASY: "EASY",
  MEDIUM: "MEDIUM",
  HARD: "HARD",
};

exports.Prisma.ModelName = {
  User: "User",
  Problem: "Problem",
  Submission: "Submission",
  TestCaseResult: "TestCaseResult",
  ProblemSolved: "ProblemSolved",
  Playlist: "Playlist",
  ProblemInPlaylist: "ProblemInPlaylist",
  DiscussionComment: "DiscussionComment",
};
/**
 * Create the Client
 */
const config = {
  generator: {
    name: "client",
    provider: {
      fromEnvVar: null,
      value: "prisma-client-js",
    },
    output: {
      value:
        "C:\\Users\\arsha\\Saved Games\\OneDrive\\Desktop\\Chai\\Revamp Version 2\\backend\\src\\generated\\prisma",
      fromEnvVar: null,
    },
    config: {
      engineType: "library",
    },
    binaryTargets: [
      {
        fromEnvVar: null,
        value: "windows",
        native: true,
      },
    ],
    previewFeatures: [],
    sourceFilePath:
      "C:\\Users\\arsha\\Saved Games\\OneDrive\\Desktop\\Chai\\Revamp Version 2\\backend\\prisma\\schema.prisma",
    isCustomOutput: true,
  },
  relativeEnvPaths: {
    rootEnvPath: null,
    schemaEnvPath: "../../../.env",
  },
  relativePath: "../../../prisma",
  clientVersion: "6.8.2",
  engineVersion: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e",
  datasourceNames: ["db"],
  activeProvider: "postgresql",
  inlineDatasources: {
    db: {
      url: {
        fromEnvVar: "DATABASE_URL",
        value: null,
      },
    },
  },
  inlineSchema:
    'generator client {\n  provider = "prisma-client-js"\n  output   = "../src/generated/prisma"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\n// User roles for permissions and functionalities\nenum UserRole {\n  ADMIN\n  USER\n}\n\n// Difficulty levels for problems and questions\nenum Difficulty {\n  EASY\n  MEDIUM\n  HARD\n}\n\nmodel User {\n  id        String   @id @default(uuid())\n  name      String?\n  email     String   @unique\n  image     String?\n  role      UserRole @default(USER)\n  password  String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  problems          Problem[]\n  submission        Submission[]\n  problemSolved     ProblemSolved[]\n  playlists         Playlist[]\n  DiscussionComment DiscussionComment[]\n}\n\nmodel Problem {\n  id          String     @id @default(uuid())\n  title       String\n  description String\n  difficulty  Difficulty\n  tags        String[] // ["tag1", "tag2", "tag3"]\n  userId      String\n  examples    Json\n  constraints String\n  hints       String?\n  editorial   String?\n\n  testcases          Json //\n  codeSnippets       Json\n  referenceSolutions Json\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  //  Relationship\n  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)\n  submission        Submission[]\n  solvedBy          ProblemSolved[]\n  problemsPlaylists ProblemInPlaylist[]\n}\n\n// enum Status{\n//   ACCEPTED\n//   WORNG_ANSWER\n// }\n\nmodel Submission {\n  id            String     @id @default(uuid())\n  userId        String\n  problemId     String\n  difficulty    Difficulty\n  sourceCode    Json\n  language      String\n  stdin         String?\n  stdout        String?\n  stderr        String?\n  compileOutput String?\n  status        String // Accepted , wrong answer\n  memory        String?\n  time          String?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)\n\n  testCases TestCaseResult[]\n}\n\nmodel TestCaseResult {\n  id            String  @id @default(uuid())\n  submissionId  String\n  testCase      Int\n  passed        Boolean\n  stdout        String?\n  expected      String\n  stderr        String?\n  compileOutput String?\n  status        String\n  memory        String?\n  time          String?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)\n\n  @@index([submissionId])\n}\n\nmodel ProblemSolved {\n  id        String   @id @default(uuid())\n  userId    String\n  problemId String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, problemId])\n}\n\nmodel Playlist {\n  id          String  @id @default(uuid())\n  name        String\n  description String?\n  userId      String\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  problems ProblemInPlaylist[]\n\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([name, userId]) // unique playlist names per user\n}\n\nmodel ProblemInPlaylist {\n  id         String   @id @default(uuid())\n  playListId String\n  problemId  String\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  playlist Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)\n  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)\n\n  @@unique([playListId, problemId])\n}\n\nmodel DiscussionComment {\n  id        String   @id @default(uuid())\n  title     String\n  content   String\n  userId    String\n  problemId String\n  createdAt DateTime @default(now())\n\n  user User @relation(fields: [userId], references: [id])\n}\n\n//=================================================================\n\n// Generator configuration for Prisma Client\n\n// generator client {\n//   provider = "prisma-client-js"\n//   output   = "../src/generated/prisma"\n// }\n//\n// datasource db {\n//   provider = "postgresql"\n//   url      = env("DATABASE_URL")\n// }\n//\n// // Enum for user roles to enforce role-based access control\n// enum UserRole {\n//   ADMIN // Admin users with elevated privileges\n//   USER // Regular users (candidates)\n// }\n//\n// // Enum for problem difficulty levels\n// enum Difficulty {\n//   EASY // Easy level problems\n//   MEDIUM // Medium level problems\n//   HARD // Hard level problems\n// }\n//\n// // Enum for different types of interviews\n// enum InterviewType {\n//   FULL_STACK // Full Stack Developer interview\n//   MACHINE_LEARNING // Machine Learning Engineer interview\n//   DATA_SCIENCE // Data Scientist interview\n//   BACKEND // Backend Engineer interview\n//   DEVOPS // DevOps Engineer interview\n//   OTHER // Other types of interviews\n// }\n//\n// // User model representing candidates and admins\n// model User {\n//   id                String   @id @default(uuid()) // Unique identifier for each user\n//   name              String? // Optional name of the user\n//   email             String   @unique // Unique email for user authentication\n//   image             String? // Optional profile image URL\n//   role              UserRole @default(USER) // Default role is USER\n//   password          String // Hashed password for authentication\n//   verified          Boolean  @default(false) // Indicates if the user\'s email is verified\n//   verificationToken String? // Token for email verification\n//   createdAt         DateTime @default(now()) // Timestamp for when the user was created\n//   updatedAt         DateTime @updatedAt // Timestamp for when the user was last updated\n//\n//   // Relationships\n//   problems      Problem[]       @relation("User CreatedProblems") // Problems created by the user\n//   submissions   Submission[] // Submissions made by the user\n//   problemSolved ProblemSolved[] // Problems solved by the user\n//   playlists     Playlist[] // Playlists created by the user\n//   interviews    Interview[] // Interviews participated in by the user\n//   feedbacks     Feedback[] // Feedback received by the user\n//   activities    Activity[] // User activities for tracking\n//\n//   // Index for quick email lookups\n//   @@index([email]) // Index on email for faster queries\n// }\n//\n// // Problem model representing coding problems/questions\n// model Problem {\n//   id          String     @id @default(uuid()) // Unique identifier for each problem\n//   title       String // Title of the problem\n//   description String // Detailed description of the problem\n//   difficulty  Difficulty // Difficulty level of the problem\n//   tags        String[]   @default([]) // Tags for categorization (e.g., ["arrays", "dynamic-programming"])\n//   userId      String // ID of the user who created the problem\n//   examples    Json // JSON object for input/output examples\n//   constraints String // Constraints for the problem\n//   hints       String? // Optional hints for solving the problem\n//   editorial   String? // Optional editorial or explanation for the problem\n//\n//   testcases          Json // JSON array of test cases for the problem\n//   codeSnippets       Json // Example starter code for different languages\n//   referenceSolutions Json // Reference solutions for the problem\n//\n//   createdAt DateTime @default(now()) // Timestamp for when the problem was created\n//   updatedAt DateTime @updatedAt // Timestamp for when the problem was last updated\n//\n//   // Relationships\n//   user        User                @relation("User CreatedProblems", fields: [userId], references: [id], onDelete: Cascade) // Creator of the problem\n//   submissions Submission[] // Submissions made for this problem\n//   solvedBy    ProblemSolved[] // Users who have solved this problem\n//   playlists   ProblemInPlaylist[] // Problems included in playlists\n//   interviews  InterviewProblem[] // Problems included in interviews\n//   // @@fulltext([title, description, hints, editorial]) // Full-text index for search optimization\n//\n//   // Indexes for performance\n//   @@index([userId]) // Index on userId for faster queries\n// }\n//\n// // Submission model representing user submissions for problems\n// model Submission {\n//   id            String  @id @default(uuid()) // Unique identifier for each submission\n//   userId        String // ID of the user who made the submission\n//   problemId     String // ID of the problem being submitted\n//   sourceCode    Json // Source code submitted, stored as JSON for flexibility\n//   language      String // Programming language used for the submission\n//   stdin         String? // Standard input for the submission (if applicable)\n//   stdout        String? // Standard output from the submission\n//   stderr        String? // Standard error from the submission\n//   compileOutput String? // Compilation output (if applicable)\n//   status        String // Status of the submission (e.g., "Accepted", "Wrong Answer")\n//   memory        String? // Memory usage of the submission\n//   time          String? // Time taken for execution\n//\n//   createdAt DateTime @default(now()) // Timestamp for when the submission was created\n//   updatedAt DateTime @updatedAt // Timestamp for when the submission was last updated\n//\n//   // Relationships\n//   user            User             @relation(fields: [userId], references: [id], onDelete: Cascade) // User who made the submission\n//   problem         Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade) // Problem being submitted\n//   testCaseResults TestCaseResult[] // Results of individual test cases for this submission\n//\n//   // Indexes for performance\n//   @@index([userId]) // Index on userId for faster queries\n//   @@index([problemId]) // Index on problemId for faster queries\n// }\n//\n// // TestCaseResult model representing results of individual test cases in a submission\n// model TestCaseResult {\n//   id            String  @id @default(uuid()) // Unique identifier for each test case result\n//   submissionId  String // ID of the submission this result belongs to\n//   testCase      Int // Index of the test case in the submission\n//   passed        Boolean // Indicates if the test case passed\n//   stdout        String? // Standard output from the test case\n//   expected      String // Expected output for the test case\n//   stderr        String? // Standard error from the test case\n//   compileOutput String? // Compilation output (if applicable)\n//   status        String // Status of the test case (e.g., "Passed", "Failed")\n//   memory        String? // Memory usage for the test case\n//   time          String? // Time taken for execution of the test case\n//\n//   createdAt DateTime @default(now()) // Timestamp for when the test case result was created\n//   updatedAt DateTime @updatedAt // Timestamp for when the test case result was last updated\n//\n//   // Relationships\n//   submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade) // Submission this result belongs to\n//\n//   // Index for performance\n//   @@index([submissionId]) // Index on submissionId for faster queries\n// }\n//\n// // ProblemSolved model tracking which problems a user has solved\n// model ProblemSolved {\n//   id        String @id @default(uuid()) // Unique identifier for each solved problem record\n//   userId    String // ID of the user who solved the problem\n//   problemId String // ID of the problem that was solved\n//\n//   createdAt DateTime @default(now()) // Timestamp for when the problem was solved\n//   updatedAt DateTime @updatedAt // Timestamp for when the record was last updated\n//\n//   // Relationships\n//   user    User    @relation(fields: [userId], references: [id], onDelete: Cascade) // User who solved the problem\n//   problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade) // Problem that was solved\n//\n//   // Unique constraint to prevent duplicate entries\n//   @@unique([userId, problemId]) // Ensure a user can only solve a problem once\n//   @@index([userId]) // Index on userId for faster queries\n//   @@index([problemId]) // Index on problemId for faster queries\n// }\n//\n// // Playlist model for grouping problems\n// model Playlist {\n//   id          String  @id @default(uuid()) // Unique identifier for each playlist\n//   name        String // Name of the playlist\n//   description String? // Optional description of the playlist\n//   userId      String // ID of the user who created the playlist\n//\n//   createdAt DateTime @default(now()) // Timestamp for when the playlist was created\n//   updatedAt DateTime @updatedAt // Timestamp for when the playlist was last updated\n//\n//   // Relationships\n//   problems ProblemInPlaylist[] // Problems included in this playlist\n//   user     User                @relation(fields: [userId], references: [id], onDelete: Cascade) // User who created the playlist\n//\n//   // Unique constraint to ensure playlist names are unique per user\n//   @@unique([name, userId]) // Ensure a user cannot have two playlists with the same name\n//   @@index([userId]) // Index on userId for faster queries\n// }\n//\n// // Join table for many-to-many relationship between playlists and problems\n// model ProblemInPlaylist {\n//   id         String @id @default(uuid()) // Unique identifier for each record\n//   playlistId String // ID of the playlist\n//   problemId  String // ID of the problem\n//\n//   createdAt DateTime @default(now()) // Timestamp for when the record was created\n//   updatedAt DateTime @updatedAt // Timestamp for when the record was last updated\n//\n//   // Relationships\n//   playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade) // Playlist this problem belongs to\n//   problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade) // Problem included in the playlist\n//\n//   // Unique constraint to prevent duplicate entries\n//   @@unique([playlistId, problemId]) // Ensure a problem can only be in a playlist once\n//   @@index([playlistId]) // Index on playlistId for faster queries\n//   @@index([problemId]) // Index on problemId for faster queries\n// }\n//\n// // Interview model representing interview sessions\n// model Interview {\n//   id            String        @id @default(uuid()) // Unique identifier for each interview\n//   userId        String // ID of the user participating in the interview\n//   interviewType InterviewType // Type of interview being conducted\n//   startedAt     DateTime      @default(now()) // Timestamp for when the interview started\n//   endedAt       DateTime? // Optional timestamp for when the interview ended\n//\n//   createdAt DateTime @default(now()) // Timestamp for when the interview was created\n//   updatedAt DateTime @updatedAt // Timestamp for when the interview was last updated\n//\n//   // Relationships\n//   user      User               @relation(fields: [userId], references: [id], onDelete: Cascade) // User participating in the interview\n//   questions InterviewProblem[] // Problems included in this interview\n//   feedback  Feedback? // Feedback for the interview\n//\n//   // Index for performance\n//   @@index([userId]) // Index on userId for faster queries\n// }\n//\n// // Join table for many-to-many relationship between interviews and problems\n// model InterviewProblem {\n//   id          String @id @default(uuid()) // Unique identifier for each record\n//   interviewId String // ID of the interview\n//   problemId   String // ID of the problem\n//\n//   createdAt DateTime @default(now()) // Timestamp for when the record was created\n//\n//   // Relationships\n//   interview Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade) // Interview this problem belongs to\n//   problem   Problem   @relation(fields: [problemId], references: [id], onDelete: Cascade) // Problem included in the interview\n//\n//   // Unique constraint to prevent duplicate entries\n//   @@unique([interviewId, problemId]) // Ensure a problem can only be included in an interview once\n//   @@index([interviewId]) // Index on interviewId for faster queries\n//   @@index([problemId]) // Index on problemId for faster queries\n// }\n//\n// // Feedback model for interview feedback\n// model Feedback {\n//   id          String  @id @default(uuid()) // Unique identifier for each feedback record\n//   interviewId String  @unique // ID of the interview this feedback is for\n//   userId      String // ID of the user who received the feedback\n//   rating      Int // Rating for the interview (1 to 5 stars)\n//   comments    String? // Optional comments for the feedback\n//\n//   createdAt DateTime @default(now()) // Timestamp for when the feedback was created\n//\n//   // Relationships\n//   interview Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade) // Interview this feedback is for\n//   user      User      @relation(fields: [userId], references: [id], onDelete: Cascade) // User who received the feedback\n//\n//   // Index for performance\n//   @@index([userId]) // Index on userId for faster queries\n// }\n//\n// // Activity model for tracking user activities\n// model Activity {\n//   id        String   @id @default(uuid()) // Unique identifier for each activity record\n//   userId    String // ID of the user who performed the activity\n//   type      String // Type of activity (e.g., "submission", "interview_started")\n//   detail    String? // Optional details about the activity\n//   timestamp DateTime @default(now()) // Timestamp for when the activity occurred\n//\n//   // Relationships\n//   user User @relation(fields: [userId], references: [id], onDelete: Cascade) // User who performed the activity\n//\n//   // Index for performance\n//   @@index([userId]) // Index on userId for faster queries\n//   @@index([type]) // Index on type for faster queries\n// }\n',
  inlineSchemaHash:
    "9c2ac8776f59c238267f0d2382b7dd4bdfd1fe6d563fab00fbbf8f7c06a41598",
  copyEngine: true,
};
config.dirname = "/";

config.runtimeDataModel = JSON.parse(
  '{"models":{"User":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"email","kind":"scalar","isList":false,"isRequired":true,"isUnique":true,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"image","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"role","kind":"enum","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"UserRole","nativeType":null,"default":"USER","isGenerated":false,"isUpdatedAt":false},{"name":"password","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":true},{"name":"problems","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Problem","nativeType":null,"relationName":"ProblemToUser","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"submission","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Submission","nativeType":null,"relationName":"SubmissionToUser","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"problemSolved","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"ProblemSolved","nativeType":null,"relationName":"ProblemSolvedToUser","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"playlists","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Playlist","nativeType":null,"relationName":"PlaylistToUser","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"DiscussionComment","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DiscussionComment","nativeType":null,"relationName":"DiscussionCommentToUser","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"Problem":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"title","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"description","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"difficulty","kind":"enum","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Difficulty","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"tags","kind":"scalar","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"userId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"examples","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Json","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"constraints","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"hints","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"editorial","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"testcases","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Json","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"codeSnippets","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Json","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"referenceSolutions","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Json","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":true},{"name":"user","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"User","nativeType":null,"relationName":"ProblemToUser","relationFromFields":["userId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false},{"name":"submission","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Submission","nativeType":null,"relationName":"ProblemToSubmission","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"solvedBy","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"ProblemSolved","nativeType":null,"relationName":"ProblemToProblemSolved","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"problemsPlaylists","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"ProblemInPlaylist","nativeType":null,"relationName":"ProblemToProblemInPlaylist","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"Submission":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"userId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"problemId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"difficulty","kind":"enum","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Difficulty","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"sourceCode","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Json","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"language","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"stdin","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"stdout","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"stderr","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"compileOutput","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"status","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"memory","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"time","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":true},{"name":"user","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"User","nativeType":null,"relationName":"SubmissionToUser","relationFromFields":["userId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false},{"name":"problem","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Problem","nativeType":null,"relationName":"ProblemToSubmission","relationFromFields":["problemId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false},{"name":"testCases","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"TestCaseResult","nativeType":null,"relationName":"SubmissionToTestCaseResult","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"TestCaseResult":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"submissionId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"testCase","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Int","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"passed","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Boolean","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"stdout","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"expected","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"stderr","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"compileOutput","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"status","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"memory","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"time","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":true},{"name":"submission","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Submission","nativeType":null,"relationName":"SubmissionToTestCaseResult","relationFromFields":["submissionId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},"ProblemSolved":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"userId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"problemId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":true},{"name":"user","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"User","nativeType":null,"relationName":"ProblemSolvedToUser","relationFromFields":["userId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false},{"name":"problem","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Problem","nativeType":null,"relationName":"ProblemToProblemSolved","relationFromFields":["problemId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[["userId","problemId"]],"uniqueIndexes":[{"name":null,"fields":["userId","problemId"]}],"isGenerated":false},"Playlist":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"description","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"userId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":true},{"name":"problems","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"ProblemInPlaylist","nativeType":null,"relationName":"PlaylistToProblemInPlaylist","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"user","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"User","nativeType":null,"relationName":"PlaylistToUser","relationFromFields":["userId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[["name","userId"]],"uniqueIndexes":[{"name":null,"fields":["name","userId"]}],"isGenerated":false},"ProblemInPlaylist":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"playListId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"problemId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","nativeType":null,"isGenerated":false,"isUpdatedAt":true},{"name":"playlist","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Playlist","nativeType":null,"relationName":"PlaylistToProblemInPlaylist","relationFromFields":["playListId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false},{"name":"problem","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Problem","nativeType":null,"relationName":"ProblemToProblemInPlaylist","relationFromFields":["problemId"],"relationToFields":["id"],"relationOnDelete":"Cascade","isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[["playListId","problemId"]],"uniqueIndexes":[{"name":null,"fields":["playListId","problemId"]}],"isGenerated":false},"DiscussionComment":{"dbName":null,"schema":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"String","nativeType":null,"default":{"name":"uuid","args":[4]},"isGenerated":false,"isUpdatedAt":false},{"name":"title","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"content","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"userId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"problemId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","nativeType":null,"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","nativeType":null,"default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"user","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"User","nativeType":null,"relationName":"DiscussionCommentToUser","relationFromFields":["userId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false}},"enums":{"UserRole":{"values":[{"name":"ADMIN","dbName":null},{"name":"USER","dbName":null}],"dbName":null},"Difficulty":{"values":[{"name":"EASY","dbName":null},{"name":"MEDIUM","dbName":null},{"name":"HARD","dbName":null}],"dbName":null}},"types":{}}'
);
defineDmmfProperty(exports.Prisma, config.runtimeDataModel);
config.engineWasm = undefined;
config.compilerWasm = undefined;

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL:
      (typeof globalThis !== "undefined" && globalThis["DATABASE_URL"]) ||
      (typeof process !== "undefined" &&
        process.env &&
        process.env.DATABASE_URL) ||
      undefined,
  },
});

if (
  (typeof globalThis !== "undefined" && globalThis["DEBUG"]) ||
  (typeof process !== "undefined" && process.env && process.env.DEBUG) ||
  undefined
) {
  Debug.enable(
    (typeof globalThis !== "undefined" && globalThis["DEBUG"]) ||
      (typeof process !== "undefined" && process.env && process.env.DEBUG) ||
      undefined
  );
}

const PrismaClient = getPrismaClient(config);
exports.PrismaClient = PrismaClient;
Object.assign(exports, Prisma);
